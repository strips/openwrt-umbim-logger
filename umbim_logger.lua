-- Code heavily generated by Google Gemini by authors instructions
-- Author, Stian Indal Haugseth

-- Configuration
local command_arguments = {"caps", "home", "registration", "subscriber", "attach", "config", "radio"}
local umbim_command = "umbim -t 6 -n -d /dev/cdc-wdm0"
local log_file = "mbim_data_" .. os.date("%Y-%m-%d") .. ".log" -- Changed log file name
local separator = "|"

-- ... (extract_key and extract_value functions remain the same)

-- Function to get the previous value from the log file (modified)
local function get_previous_value(key, argument)
  local cmd = "grep '" .. argument .. "|" .. key .. "' " .. log_file .. " 2>/dev/null | tail -n 1"
  local handle = io.popen(cmd)
  local output = handle:read("*a")
  handle:close()
  if output then
    local _, _, previous_value = string.find(output, separator .. "(.*)")
    return previous_value
  end
  return nil
end

-- Function to print and log the value
local function print_and_log(argument, key, value, status)
  local timestamp = os.date("!%Y-%m-%dT%H:%M:%S%z")
  local output = timestamp .. separator .. status .. separator .. argument .. separator .. key .. separator .. value
  print(output) -- Print to stdout
  local file = io.open(log_file, "a")
  file:write(output .. "\n")
  file:close()
end

-- Main loop
while true do
  for _, argument in ipairs(command_arguments) do
    local cmd = umbim_command .. " " .. argument
    local handle = io.popen(cmd)
    local output = handle:read("*a")
    handle:close()

    for line in string.gmatch(output, "[^\n]+") do
      local key = extract_key(line)
      if key then
        local new_value = extract_value(line)
        local previous_value = get_previous_value(key, argument)

        if not previous_value then
          -- First run, print and log all values
          print_and_log(argument, key, new_value, "initial")
        elseif new_value ~= previous_value then
          -- Value changed, print and log the new value
          print_and_log(argument, key, new_value, "changed")
        end
      end
    end
  end

  os.execute("sleep 60") -- Wait for 60 seconds
end
